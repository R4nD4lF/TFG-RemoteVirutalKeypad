import { Component, Input, ChangeDetectionStrategy } from '@angular/core';
import { NodeService } from '../node.service';
import * as i0 from "@angular/core";
import * as i1 from "../node.service";
import * as i2 from "@angular/common";
import * as i3 from "../socket/socket.component";
import * as i4 from "../control.directive";
import * as i5 from "../socket.directive";
import * as i6 from "../kebab.pipe";
export class NodeComponent {
    constructor(service, cdr) {
        this.service = service;
        this.cdr = cdr;
    }
    ngOnInit() {
        this.service.setBindings(this.bindSocket, this.bindControl);
        this.node.update = () => this.cdr.detectChanges();
    }
    get inputs() {
        return Array.from(this.node.inputs.values());
    }
    get outputs() {
        return Array.from(this.node.outputs.values());
    }
    get controls() {
        return Array.from(this.node.controls.values());
    }
    selected() {
        return this.editor.selected.contains(this.node) ? 'selected' : '';
    }
}
NodeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.2", ngImport: i0, type: NodeComponent, deps: [{ token: i1.NodeService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NodeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.2", type: NodeComponent, selector: "ng-component", inputs: { editor: "editor", node: "node", bindSocket: "bindSocket", bindControl: "bindControl" }, providers: [NodeService], ngImport: i0, template: "<div class=\"node\" [ngClass]=\"[selected(), node.name] | kebab\">\n    <div class=\"title\">{{node.name}}</div>\n    <div class=\"output\" *ngFor=\"let output of outputs\">\n        <div class=\"output-title\">{{output.name}}</div>\n        <rete-socket rete-socket [io]=\"output\" [socket]=\"output.socket\"></rete-socket>\n    </div>\n    <div class=\"control\" *ngFor=\"let control of controls\" [rete-control]=\"control\"></div>\n    <div class=\"input\" *ngFor=\"let input of inputs\">\n        <rete-socket rete-socket [io]=\"input\" [socket]=\"input.socket\"></rete-socket>\n        <div class=\"input-title\" *ngIf=\"!input.showControl()\">{{input.name}}</div>\n        <div class=\"input-control\" *ngIf=\"input.showControl()\" [rete-control]=\"input.control\"></div>\n    </div>\n</div>", styles: [".node{background:rgba(110,136,255,.8);border:2px solid #4e58bf;border-radius:10px;cursor:pointer;min-width:180px;height:auto;padding-bottom:6px;box-sizing:content-box;position:relative;-webkit-user-select:none;user-select:none}.node:hover{background:rgba(130,153,255,.8)}.node.selected{background:#ffd92c;border-color:#e3c000}.node .title{color:#fff;font-family:sans-serif;font-size:18px;padding:8px}.node .output{text-align:right}.node .input{text-align:left}.node .input-title,.node .output-title{vertical-align:middle;color:#fff;display:inline-block;font-family:sans-serif;font-size:14px;margin:6px;line-height:24px}.node .input-title[hidden],.node .output-title[hidden]{display:none}.node .input-control{z-index:1;width:calc(100% - 36px);vertical-align:middle;display:inline-block}.node .control{padding:6px 18px}\n"], dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.SocketComponent, selector: "rete-socket", inputs: ["socket", "io"] }, { kind: "directive", type: i4.ControlDirective, selector: "[rete-control]", inputs: ["rete-control"] }, { kind: "directive", type: i5.SocketDirective, selector: "[rete-socket]", inputs: ["io"] }, { kind: "pipe", type: i6.KebabPipe, name: "kebab" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.2", ngImport: i0, type: NodeComponent, decorators: [{
            type: Component,
            args: [{ providers: [NodeService], changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"node\" [ngClass]=\"[selected(), node.name] | kebab\">\n    <div class=\"title\">{{node.name}}</div>\n    <div class=\"output\" *ngFor=\"let output of outputs\">\n        <div class=\"output-title\">{{output.name}}</div>\n        <rete-socket rete-socket [io]=\"output\" [socket]=\"output.socket\"></rete-socket>\n    </div>\n    <div class=\"control\" *ngFor=\"let control of controls\" [rete-control]=\"control\"></div>\n    <div class=\"input\" *ngFor=\"let input of inputs\">\n        <rete-socket rete-socket [io]=\"input\" [socket]=\"input.socket\"></rete-socket>\n        <div class=\"input-title\" *ngIf=\"!input.showControl()\">{{input.name}}</div>\n        <div class=\"input-control\" *ngIf=\"input.showControl()\" [rete-control]=\"input.control\"></div>\n    </div>\n</div>", styles: [".node{background:rgba(110,136,255,.8);border:2px solid #4e58bf;border-radius:10px;cursor:pointer;min-width:180px;height:auto;padding-bottom:6px;box-sizing:content-box;position:relative;-webkit-user-select:none;user-select:none}.node:hover{background:rgba(130,153,255,.8)}.node.selected{background:#ffd92c;border-color:#e3c000}.node .title{color:#fff;font-family:sans-serif;font-size:18px;padding:8px}.node .output{text-align:right}.node .input{text-align:left}.node .input-title,.node .output-title{vertical-align:middle;color:#fff;display:inline-block;font-family:sans-serif;font-size:14px;margin:6px;line-height:24px}.node .input-title[hidden],.node .output-title[hidden]{display:none}.node .input-control{z-index:1;width:calc(100% - 36px);vertical-align:middle;display:inline-block}.node .control{padding:6px 18px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.NodeService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { editor: [{
                type: Input
            }], node: [{
                type: Input
            }], bindSocket: [{
                type: Input
            }], bindControl: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbm9kZS9ub2RlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uL3NyYy9ub2RlL25vZGUuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsdUJBQXVCLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBRTdGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7Ozs7Ozs7QUFROUMsTUFBTSxPQUFPLGFBQWE7SUFNeEIsWUFBc0IsT0FBb0IsRUFBWSxHQUFzQjtRQUF0RCxZQUFPLEdBQVAsT0FBTyxDQUFhO1FBQVksUUFBRyxHQUFILEdBQUcsQ0FBbUI7SUFBRyxDQUFDO0lBRWhGLFFBQVE7UUFDTixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3BELENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1QsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNwRSxDQUFDOzswR0EzQlUsYUFBYTs4RkFBYixhQUFhLHlJQUhiLENBQUMsV0FBVyxDQUFDLDBCQ1AxQiwreEJBWU07MkZERk8sYUFBYTtrQkFOekIsU0FBUztnQ0FHRyxDQUFDLFdBQVcsQ0FBQyxtQkFDUCx1QkFBdUIsQ0FBQyxNQUFNO2tJQUd0QyxNQUFNO3NCQUFkLEtBQUs7Z0JBQ0csSUFBSTtzQkFBWixLQUFLO2dCQUNHLFVBQVU7c0JBQWxCLEtBQUs7Z0JBQ0csV0FBVztzQkFBbkIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9kZUVkaXRvciwgTm9kZSwgSW5wdXQgYXMgUmV0ZUlucHV0LCBPdXRwdXQgYXMgUmV0ZU91dHB1dCwgQ29udHJvbCBhcyBSZXRlQ29udHJvbCB9IGZyb20gJ3JldGUnO1xuaW1wb3J0IHsgTm9kZVNlcnZpY2UgfSBmcm9tICcuLi9ub2RlLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgdGVtcGxhdGVVcmw6ICcuL25vZGUuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9ub2RlLmNvbXBvbmVudC5zYXNzJ10sXG4gIHByb3ZpZGVyczogW05vZGVTZXJ2aWNlXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgTm9kZUNvbXBvbmVudCB7XG4gIEBJbnB1dCgpIGVkaXRvciE6IE5vZGVFZGl0b3I7XG4gIEBJbnB1dCgpIG5vZGUhOiBOb2RlO1xuICBASW5wdXQoKSBiaW5kU29ja2V0ITogRnVuY3Rpb247XG4gIEBJbnB1dCgpIGJpbmRDb250cm9sITogRnVuY3Rpb247XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHNlcnZpY2U6IE5vZGVTZXJ2aWNlLCBwcm90ZWN0ZWQgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnNlcnZpY2Uuc2V0QmluZGluZ3ModGhpcy5iaW5kU29ja2V0LCB0aGlzLmJpbmRDb250cm9sKTtcbiAgICB0aGlzLm5vZGUudXBkYXRlID0gKCkgPT4gdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgZ2V0IGlucHV0cygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLm5vZGUuaW5wdXRzLnZhbHVlcygpKTtcbiAgfVxuXG4gIGdldCBvdXRwdXRzKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMubm9kZS5vdXRwdXRzLnZhbHVlcygpKTtcbiAgfVxuXG4gIGdldCBjb250cm9scygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLm5vZGUuY29udHJvbHMudmFsdWVzKCkpO1xuICB9XG5cbiAgc2VsZWN0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRpdG9yLnNlbGVjdGVkLmNvbnRhaW5zKHRoaXMubm9kZSkgPyAnc2VsZWN0ZWQnIDogJyc7XG4gIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJub2RlXCIgW25nQ2xhc3NdPVwiW3NlbGVjdGVkKCksIG5vZGUubmFtZV0gfCBrZWJhYlwiPlxuICAgIDxkaXYgY2xhc3M9XCJ0aXRsZVwiPnt7bm9kZS5uYW1lfX08L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwib3V0cHV0XCIgKm5nRm9yPVwibGV0IG91dHB1dCBvZiBvdXRwdXRzXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJvdXRwdXQtdGl0bGVcIj57e291dHB1dC5uYW1lfX08L2Rpdj5cbiAgICAgICAgPHJldGUtc29ja2V0IHJldGUtc29ja2V0IFtpb109XCJvdXRwdXRcIiBbc29ja2V0XT1cIm91dHB1dC5zb2NrZXRcIj48L3JldGUtc29ja2V0PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjb250cm9sXCIgKm5nRm9yPVwibGV0IGNvbnRyb2wgb2YgY29udHJvbHNcIiBbcmV0ZS1jb250cm9sXT1cImNvbnRyb2xcIj48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiaW5wdXRcIiAqbmdGb3I9XCJsZXQgaW5wdXQgb2YgaW5wdXRzXCI+XG4gICAgICAgIDxyZXRlLXNvY2tldCByZXRlLXNvY2tldCBbaW9dPVwiaW5wdXRcIiBbc29ja2V0XT1cImlucHV0LnNvY2tldFwiPjwvcmV0ZS1zb2NrZXQ+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC10aXRsZVwiICpuZ0lmPVwiIWlucHV0LnNob3dDb250cm9sKClcIj57e2lucHV0Lm5hbWV9fTwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtY29udHJvbFwiICpuZ0lmPVwiaW5wdXQuc2hvd0NvbnRyb2woKVwiIFtyZXRlLWNvbnRyb2xdPVwiaW5wdXQuY29udHJvbFwiPjwvZGl2PlxuICAgIDwvZGl2PlxuPC9kaXY+Il19